import 'dart:convert';
import 'dart:io';

/// Generate an obfuscated key function and append it to lib/secret.dart.
/// If lib/secret.dart does not exist, create a skeleton class.
/// The generated function will return the original key when called.
/// The key can be provided as a plaintext string or read from a file.
/// The obfuscation is done using a simple XOR with a fixed mask.
class Obfuscator {

  static void generate(String input, String functionName) {
    String key;
    /// If input is an existing file, read its exact contents (multiline supported)
    final file = File(input);
    if (file.existsSync()) {
      key = file.readAsStringSync();
      print("üìÇ Loaded key from file: $input");
    } else {
      key = input;
      print("üîë Using inline key: $input");
    }

    const mask = 137; // XOR mask
    final encoded = utf8.encode(key);
    final obfuscated = encoded.map((b) => b ^ mask).toList();

    /// Split into 4 byte chunks
    const chunkSize = 4;
    final chunks = <List<int>>[];
    for (var i = 0; i < obfuscated.length; i += chunkSize) {
      chunks.add(obfuscated.sublist(i, (i + chunkSize).clamp(0, obfuscated.length)));
    }

    // Path file target
    final secretFile = File("secretkey.dart");

    // If the file doesn't exist yet ‚Üí create a skeleton class
    if (!secretFile.existsSync()) {
      secretFile.writeAsStringSync("""
import 'dart:convert';

/// Auto-generated by secret_key_secret_generator.
/// Never manually edit the code inside the fucntion in this file!
class SecretKey {
  static const _mask = $mask;
}
""");
    }

    // Add a new method
    final method =
        """

  static String $functionName() async {
    const chunks = <List<int>>${jsonEncode(chunks)};
    final flat = chunks.expand((e) => e).map((b) => b ^ _mask).toList();
    return utf8.decode(flat);
  }
""";

    // Append to SecretKey class
    var content = secretFile.readAsStringSync();

    // Cek kalau method sudah ada
    if (content.contains("static Future<String> $functionName()")) {
      print("‚ö†Ô∏è Function $functionName() already exists in lib/secret.dart. Aborting.");
      return;
    }

    // Tambahkan method **sebelum kurung kurawal penutup class**
    final classEndIndex = content.lastIndexOf("}");
    if (classEndIndex == -1) {
      throw Exception("Cannot find closing brace for SecretKey class.");
    }

    content = "${content.substring(0, classEndIndex)}$method\n}";

    secretFile.writeAsStringSync(content);

    print("‚úÖ Added function $functionName() to lib/secret.dart");
  }
}
